package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author Matias
 */
public class ListaInt {
    
    private boolean tf;
    private int b;
    private Ordenar O = null;
    private int[] lista;
    public ListaInt(int[] list){
    lista=list;
    }
    public void sort(String tipo){
        if (tipo.equals("quicksort"))
             new OrdenMerge().ordenar(lista);
                    else 
            if (tipo.equals("mergesort"))
              new  OrdenQuick().ordenar(lista);
    }  
        
    public void search(String tipo){
        if (tipo.equals("binary"))
        tf = new BuscaBinary().buscar(lista,b);
                 
    }
    
    public void printMe(){
        System.out.println();
        System.out.print("(");
        for(int x:lista){
            System.out.print(x);
            System.out.print(" ");
        }
        System.out.print(")");
        System.out.println();
    }
    
    public void print(){
    if(tf == true)
     System.out.println("esta");
    else
     System.out.println("no se encuentra");   
    
    
    }
    
    public void setNumber(int b){
       this.b = b; 
        
    }
            
}





package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public class OrdenMerge implements Ordenar {
 
    public void ordenar(int[] list) {
    this.mergesort(list);    
  }
  
    private void mergesort(int[] lista){
          mergesort(lista, 0,lista.length-1, new int[lista.length]);
      }
      private void mergesort(int[] lista,int low, int high,int[] helper) {    
      if (low < high) {      
        int middle = (low + high) / 2;      
        mergesort(lista,low, middle,helper);      
        mergesort(lista,middle + 1, high,helper);      
        merge(lista, low, middle, high,helper);
      }
    }

    private void merge(int[] lista,int low, int middle, int high,int [] helper) {
      for (int i = low; i <= high; i++) {
        helper[i] = lista[i];
      }
     int i = low;
      int j = middle + 1;
      int k = low;    
      while (i <= middle && j <= high) {
        if (helper[i] <= helper[j]) {
          lista[k] = helper[i];
          i++;
        } else {
          lista[k] = helper[j];
          j++;
        }
        k++;
      }    
      while (i <= middle) {
        lista[k] = helper[i];
        k++;
        i++;
      }
          }
    
} 




package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public class OrdenQuick implements Ordenar {
    @Override
      public void ordenar(int[] list) {
    this.quicksort(list);
  }

   private void quicksort(int[] list){
       quicksort(list, 0,list.length-1);
      }
      private void quicksort(int[] list,int low,int high) {                         
      int i=low, j =high;
      int pivot = list[low + (high-low)/2];
      while (i <= j) {
        while (list[i] < pivot) {
          i++;
        }
        while (list[j] > pivot) {
          j--;
        }

        if (i <= j) {
          exchange(list, i, j);
          i++;
          j--;
        }
      }
      // Recursion
      if (low < j)
        quicksort(list, low, j);
      if (i < high)
        quicksort(list, i, high);
    }

    private void exchange(int[] list, int i, int j) {
      int temp = list[i];
      list[i] = list[j];
      list[j] = temp;
    }


} 




package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public interface  Ordenar {
  
    public void ordenar(int[] list);
    
    
}




package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public interface Buscar {
    
    public boolean buscar(int[] list, int b);
    
}





package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public class BuscaBinary implements Buscar {  
   

    @Override
  public boolean buscar(int[] list, int b) {
        
      boolean Binary = BuscaBinary.Binary(list,b);
      
      return Binary;
  }
    
  public static boolean Binary(int[] a, int b) {
    if (a.length == 0) {
      return false;
    }
    int low = 0;
    int high = a.length-1;

    while(low <= high) {
      int middle = (low+high) /2; 
      if (b> a[middle]){
        low = middle +1;
      } else if (b< a[middle]){
        high = middle -1;
      } else { // The element has been found
        return true; 
      }
    }
    return false;
  }
}  




package ar.edu.untdf.labprog.tp1.ejer4.sol;

/**
 *
 * @author User
 */
public class ManiOrden {
    
    
    public static void main(String[] args) {
    
              int [] test={1,4,6,8,9,5,1,3,34,32,7,69,44};
             ListaInt l =new ListaInt(test);
                       
              l.sort("quicksort");
              l.printMe();
              l.setNumber(10);
              l.search("binary");
              l.print();
              
      }
} 
